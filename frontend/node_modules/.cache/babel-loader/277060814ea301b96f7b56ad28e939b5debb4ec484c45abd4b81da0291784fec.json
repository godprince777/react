{"ast":null,"code":"// redux-saga의 call, put 이펙트 함수 가져오기\n// call: 비동기 함수를 실행\n// put: 액션을 디스패치\nimport { call, put } from \"redux-saga/effects\";\n\n// 로딩 상태 관리 액션\n// - startLoading: 로딩 시작\n// - finishLoading: 로딩 종료\nimport { startLoading, finishLoading } from \"../modules/loading\";\n\n// createRequestActionTypes:\n// 요청 액션 타입을 한번에 3종류로 만들어주는 헬퍼\n// 예: \"FETCH_POST\" → [\"FETCH_POST\", \"FETCH_POST_SUCCESS\", \"FETCH_POST_FAILURE\"]\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`; // 성공 시 액션 타입\n  const FAILURE = `${type}_FAILURE`; // 실패 시 액션 타입\n  return [type, SUCCESS, FAILURE];\n};\n\n// createRequestSaga:\n// API 호출 패턴을 표준화해주는 헬퍼 함수\n// type: 요청 액션 타입 (ex. FETCH_POST)\n// request: 실제로 API를 호출하는 함수\nexport default function createRequestSaga(type, request) {\n  // 성공 시 디스패치할 액션 타입\n  const SUCCESS = `${type}_SUCCESS`;\n  // 실패 시 디스패치할 액션 타입\n  const FAILURE = `${type}_FAILURE`;\n\n  // 실제 saga(generator 함수)를 반환\n  return function* (action) {\n    // 1) 로딩 시작 액션\n    yield put(startLoading(type));\n    try {\n      // 2) API 요청\n      // call(함수, 인자) → yield call(api함수, action.payload)\n      const response = yield call(request, action.payload);\n\n      // 3) 요청 성공 시\n      yield put({\n        type: SUCCESS,\n        // ex) FETCH_POST_SUCCESS\n        payload: response.data // API 응답 데이터를 payload로 전달\n      });\n    } catch (error) {\n      // 4) 요청 실패 시\n      yield put({\n        type: FAILURE,\n        // ex) FETCH_POST_FAILURE\n        payload: error,\n        // 에러 객체\n        error: true // redux 에러 표준\n      });\n    } finally {\n      // 5) 로딩 종료 액션\n      yield put(finishLoading(type));\n    }\n  };\n}","map":{"version":3,"names":["call","put","startLoading","finishLoading","createRequestActionTypes","type","SUCCESS","FAILURE","createRequestSaga","request","action","response","payload","data","error"],"sources":["/home/prince/work/blog-frontend/src/lib/createRequestSaga.js"],"sourcesContent":["// redux-saga의 call, put 이펙트 함수 가져오기\n// call: 비동기 함수를 실행\n// put: 액션을 디스패치\nimport { call, put } from \"redux-saga/effects\";\n\n// 로딩 상태 관리 액션\n// - startLoading: 로딩 시작\n// - finishLoading: 로딩 종료\nimport { startLoading, finishLoading } from \"../modules/loading\";\n\n// createRequestActionTypes:\n// 요청 액션 타입을 한번에 3종류로 만들어주는 헬퍼\n// 예: \"FETCH_POST\" → [\"FETCH_POST\", \"FETCH_POST_SUCCESS\", \"FETCH_POST_FAILURE\"]\nexport const createRequestActionTypes = (type) => {\n    const SUCCESS = `${type}_SUCCESS`;  // 성공 시 액션 타입\n    const FAILURE = `${type}_FAILURE`;  // 실패 시 액션 타입\n    return [type, SUCCESS, FAILURE];\n};\n\n// createRequestSaga:\n// API 호출 패턴을 표준화해주는 헬퍼 함수\n// type: 요청 액션 타입 (ex. FETCH_POST)\n// request: 실제로 API를 호출하는 함수\nexport default function createRequestSaga(type, request) {\n    // 성공 시 디스패치할 액션 타입\n    const SUCCESS = `${type}_SUCCESS`;\n    // 실패 시 디스패치할 액션 타입\n    const FAILURE = `${type}_FAILURE`;\n\n    // 실제 saga(generator 함수)를 반환\n    return function* (action) {\n        // 1) 로딩 시작 액션\n        yield put(startLoading(type));\n\n        try {\n            // 2) API 요청\n            // call(함수, 인자) → yield call(api함수, action.payload)\n            const response = yield call(request, action.payload);\n\n            // 3) 요청 성공 시\n            yield put({\n                type: SUCCESS,           // ex) FETCH_POST_SUCCESS\n                payload: response.data,  // API 응답 데이터를 payload로 전달\n            });\n        } catch (error) {\n            // 4) 요청 실패 시\n            yield put({\n                type: FAILURE,  // ex) FETCH_POST_FAILURE\n                payload: error, // 에러 객체\n                error: true,    // redux 에러 표준\n            });\n        } finally {\n            // 5) 로딩 종료 액션\n            yield put(finishLoading(type));\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;;AAE9C;AACA;AACA;AACA,SAASC,YAAY,EAAEC,aAAa,QAAQ,oBAAoB;;AAEhE;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAIC,IAAI,IAAK;EAC9C,MAAMC,OAAO,GAAG,GAAGD,IAAI,UAAU,CAAC,CAAE;EACpC,MAAME,OAAO,GAAG,GAAGF,IAAI,UAAU,CAAC,CAAE;EACpC,OAAO,CAACA,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACH,IAAI,EAAEI,OAAO,EAAE;EACrD;EACA,MAAMH,OAAO,GAAG,GAAGD,IAAI,UAAU;EACjC;EACA,MAAME,OAAO,GAAG,GAAGF,IAAI,UAAU;;EAEjC;EACA,OAAO,WAAWK,MAAM,EAAE;IACtB;IACA,MAAMT,GAAG,CAACC,YAAY,CAACG,IAAI,CAAC,CAAC;IAE7B,IAAI;MACA;MACA;MACA,MAAMM,QAAQ,GAAG,MAAMX,IAAI,CAACS,OAAO,EAAEC,MAAM,CAACE,OAAO,CAAC;;MAEpD;MACA,MAAMX,GAAG,CAAC;QACNI,IAAI,EAAEC,OAAO;QAAY;QACzBM,OAAO,EAAED,QAAQ,CAACE,IAAI,CAAG;MAC7B,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACA,MAAMb,GAAG,CAAC;QACNI,IAAI,EAAEE,OAAO;QAAG;QAChBK,OAAO,EAAEE,KAAK;QAAE;QAChBA,KAAK,EAAE,IAAI,CAAK;MACpB,CAAC,CAAC;IACN,CAAC,SAAS;MACN;MACA,MAAMb,GAAG,CAACE,aAAa,CAACE,IAAI,CAAC,CAAC;IAClC;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}