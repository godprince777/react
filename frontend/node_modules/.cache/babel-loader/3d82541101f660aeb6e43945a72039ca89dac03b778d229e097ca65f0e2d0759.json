{"ast":null,"code":"// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { createAction, handleActions } from \"redux-actions\";\n\n// immer: 불변성을 편리하게 유지해주는 라이브러리\nimport { produce } from \"immer\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport * as authAPI from \"../lib/api/auth\";\n\n// 요청 액션 타입/사가 헬퍼\nimport { createRequestActionTypes, createRequestSaga } from \"../lib/createRequestSaga\";\n\n// 액션 타입 정의\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\"; // 폼 필드 값 변경\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\"; // 폼 초기화\n\n// 회원가입(register) 관련 액션 3종\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\"REGISTER\");\n// 로그인(login) 관련 액션 3종\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\"LOGIN\");\n// 로그인 유지(토큰 검증) 관련 액션 3종\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\"CHECK\");\n\n// changeField 액션 생성자\n// form: register or login\n// key: username, password 등\n// value: 변경할 값\nexport const changeField = createAction(CHANGE_FIELD, (form, key, value) => ({\n  form,\n  key,\n  value\n}));\n\n// initializeForm 액션 생성자\n// 어떤 폼(register/login)을 초기화할지 전달\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\nexport const register = createAction(REGISTER, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const check = createAction(CHECK);\nexport const registerSaga = createRequestSaga(REGISTER, authAPI.register);\nexport const loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport const checkSaga = createRequestSaga(CHECK, authAPI.check);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(CHECK, checkSaga);\n}\n\n// 초기 상태 정의\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  }\n};\n\n// 리듀서 정의\nconst auth = handleActions({\n  // CHANGE_FIELD 액션 처리\n  // immer produce 사용\n  // 예: draft['register']['username'] = '홍길동'\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value;\n  }),\n  // INITIALIZE_FORM 액션 처리\n  // 해당 폼의 상태를 초기 상태로 되돌림\n  [INITIALIZE_FORM]: (state, {\n    payload: form\n  }) => ({\n    ...state,\n    [form]: initialState[form]\n  })\n}, initialState);\n\n// 이 auth 리듀서를 모듈에서 기본 export\nexport default auth;","map":{"version":3,"names":["createAction","handleActions","produce","takeLatest","authAPI","createRequestActionTypes","createRequestSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","CHECK","CHECK_SUCCESS","CHECK_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","check","registerSaga","loginSaga","checkSaga","authSaga","initialState","passwordConfirm","auth","state","payload","draft"],"sources":["/home/prince/work/blog-frontend/src/modules/auth.js"],"sourcesContent":["// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { createAction, handleActions } from \"redux-actions\"; \n\n// immer: 불변성을 편리하게 유지해주는 라이브러리\nimport { produce } from \"immer\";\n\nimport { takeLatest } from \"redux-saga/effects\";\nimport * as authAPI from \"../lib/api/auth\";\n\n// 요청 액션 타입/사가 헬퍼\nimport { createRequestActionTypes, createRequestSaga } from \"../lib/createRequestSaga\";\n\n// 액션 타입 정의\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";         // 폼 필드 값 변경\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";   // 폼 초기화\n\n// 회원가입(register) 관련 액션 3종\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\"REGISTER\");\n// 로그인(login) 관련 액션 3종\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\"LOGIN\");\n// 로그인 유지(토큰 검증) 관련 액션 3종\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\"CHECK\");\n\n// changeField 액션 생성자\n// form: register or login\n// key: username, password 등\n// value: 변경할 값\nexport const changeField = createAction(\n    CHANGE_FIELD,\n    (form, key, value) => ({\n        form,\n        key,\n        value,\n    })\n);\n\n// initializeForm 액션 생성자\n// 어떤 폼(register/login)을 초기화할지 전달\nexport const initializeForm = createAction(\n    INITIALIZE_FORM,\n    (form) => form\n);\n\nexport const register = createAction(REGISTER, ({ username, password }) => ({ username, password }));\nexport const login = createAction(LOGIN, ({ username, password }) => ({ username, password }));\nexport const check = createAction(CHECK);\n\nexport const registerSaga = createRequestSaga(REGISTER, authAPI.register);\nexport const loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport const checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nexport function* authSaga() {\n    yield takeLatest(REGISTER, registerSaga);\n    yield takeLatest(LOGIN, loginSaga);\n    yield takeLatest(CHECK, checkSaga);\n}\n\n\n// 초기 상태 정의\nconst initialState = {\n    register: {\n        username: '',\n        password: '',\n        passwordConfirm: '',\n    },\n    login: {\n        username: '',\n        password: '',\n    },\n};\n\n\n// 리듀서 정의\nconst auth = handleActions(\n    {\n        // CHANGE_FIELD 액션 처리\n        // immer produce 사용\n        // 예: draft['register']['username'] = '홍길동'\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n            produce(state, draft => {\n                draft[form][key] = value;\n            }),\n        // INITIALIZE_FORM 액션 처리\n        // 해당 폼의 상태를 초기 상태로 되돌림\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\n            ...state,\n            [form]: initialState[form],\n        }),\n    },\n    initialState\n);\n\n// 이 auth 리듀서를 모듈에서 기본 export\nexport default auth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}