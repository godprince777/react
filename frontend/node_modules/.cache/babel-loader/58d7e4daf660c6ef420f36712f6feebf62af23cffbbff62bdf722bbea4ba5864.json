{"ast":null,"code":"// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { createAction, handleActions } from \"redux-actions\";\n\n// immer: 불변성을 편리하게 유지해주는 라이브러리\nimport { produce } from \"immer\";\n\n// redux-saga 이펙트 함수\nimport { takeLatest } from \"redux-saga/effects\";\n\n// auth 관련 API 함수들\nimport * as authAPI from \"../lib/api/auth\";\n\n// 요청 액션 타입/사가 헬퍼\nimport { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport createRequestSaga from \"../lib/createRequestSaga\";\n\n// 액션 타입 정의\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\"; // 폼 필드 값 변경\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\"; // 폼 초기화\n\n// 회원가입(register) 관련 액션 3종\n// ex) REGISTER / REGISTER_SUCCESS / REGISTER_FAILURE\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\"REGISTER\");\n\n// 로그인(login) 관련 액션 3종\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\"LOGIN\");\n\n// 로그인 상태 검증(CHECK) 관련 액션 3종\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\"CHECK\");\n\n// changeField 액션 생성자\n// form: register or login\n// key: username, password 등\n// value: 실제 변경 값\nexport const changeField = createAction(CHANGE_FIELD, (form, key, value) => ({\n  form,\n  key,\n  value\n}));\n\n// initializeForm 액션 생성자\n// 어떤 폼(register/login)을 초기화할지 전달\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\n\n// 회원가입 요청 액션\nexport const register = createAction(REGISTER, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\n\n// 로그인 요청 액션\nexport const login = createAction(LOGIN, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\n\n// 로그인 유지(체크) 요청 액션\nexport const check = createAction(CHECK);\n\n// registerSaga: 회원가입 API 요청을 처리\nexport const registerSaga = createRequestSaga(REGISTER, authAPI.register);\n\n// loginSaga: 로그인 API 요청을 처리\nexport const loginSaga = createRequestSaga(LOGIN, authAPI.login);\n\n// checkSaga: 로그인 상태 검증 API 요청을 처리\nexport const checkSaga = createRequestSaga(CHECK, authAPI.check);\n\n// authSaga: auth 관련 saga 총괄 등록\n// takeLatest → 같은 요청 여러 번 들어와도 마지막 것만 처리\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(CHECK, checkSaga);\n}\n\n// 초기 상태 정의\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  // 로그인/회원가입 성공 시 사용자 정보\n  authError: null // 로그인/회원가입 실패 시 에러 정보\n};\n\n// 리듀서 정의\nconst auth = handleActions({\n  // CHANGE_FIELD\n  // 폼 입력 필드의 값 변경\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value;\n  }),\n  // INITIALIZE_FORM\n  // 폼 상태 초기화\n  [INITIALIZE_FORM]: (state, {\n    payload: form\n  }) => ({\n    ...state,\n    [form]: initialState[form],\n    authError: null // 에러도 같이 초기화\n  }),\n  // 회원가입 성공\n  [REGISTER_SUCCESS]: (state, {\n    payload: auth\n  }) => ({\n    ...state,\n    authError: null,\n    auth\n  }),\n  // 회원가입 실패\n  [REGISTER_FAILURE]: (state, {\n    payload: error\n  }) => ({\n    ...state,\n    authError: error,\n    auth: null\n  }),\n  // 로그인 성공\n  [LOGIN_SUCCESS]: (state, {\n    payload: auth\n  }) => ({\n    ...state,\n    authError: null,\n    auth\n  }),\n  // 로그인 실패\n  [LOGIN_FAILURE]: (state, {\n    payload: error\n  }) => ({\n    ...state,\n    authError: error\n  }),\n  // check (로그인 유지) 성공\n  [CHECK_SUCCESS]: (state, {\n    payload: auth\n  }) => ({\n    ...state,\n    authError: null,\n    auth\n  }),\n  // check 실패\n  [CHECK_FAILURE]: (state, {\n    payload: error\n  }) => ({\n    ...state,\n    authError: error\n  })\n}, initialState);\n\n// 이 auth 리듀서를 모듈에서 기본 export\nexport default auth;","map":{"version":3,"names":["createAction","handleActions","produce","takeLatest","authAPI","createRequestActionTypes","createRequestSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","CHECK","CHECK_SUCCESS","CHECK_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","check","registerSaga","loginSaga","checkSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"sources":["/home/prince/work/blog-frontend/src/modules/auth.js"],"sourcesContent":["// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { createAction, handleActions } from \"redux-actions\";\n\n// immer: 불변성을 편리하게 유지해주는 라이브러리\nimport { produce } from \"immer\";\n\n// redux-saga 이펙트 함수\nimport { takeLatest } from \"redux-saga/effects\";\n\n// auth 관련 API 함수들\nimport * as authAPI from \"../lib/api/auth\";\n\n// 요청 액션 타입/사가 헬퍼\nimport { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport createRequestSaga from \"../lib/createRequestSaga\";\n\n// 액션 타입 정의\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";         // 폼 필드 값 변경\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";   // 폼 초기화\n\n// 회원가입(register) 관련 액션 3종\n// ex) REGISTER / REGISTER_SUCCESS / REGISTER_FAILURE\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\"REGISTER\");\n\n// 로그인(login) 관련 액션 3종\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\"LOGIN\");\n\n// 로그인 상태 검증(CHECK) 관련 액션 3종\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\"CHECK\");\n\n// changeField 액션 생성자\n// form: register or login\n// key: username, password 등\n// value: 실제 변경 값\nexport const changeField = createAction(\n    CHANGE_FIELD,\n    (form, key, value) => ({\n        form,\n        key,\n        value,\n    })\n);\n\n// initializeForm 액션 생성자\n// 어떤 폼(register/login)을 초기화할지 전달\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form);\n\n// 회원가입 요청 액션\nexport const register = createAction(\n    REGISTER,\n    ({ username, password }) => ({ username, password })\n);\n\n// 로그인 요청 액션\nexport const login = createAction(\n    LOGIN,\n    ({ username, password }) => ({ username, password })\n);\n\n// 로그인 유지(체크) 요청 액션\nexport const check = createAction(CHECK);\n\n// registerSaga: 회원가입 API 요청을 처리\nexport const registerSaga = createRequestSaga(REGISTER, authAPI.register);\n\n// loginSaga: 로그인 API 요청을 처리\nexport const loginSaga = createRequestSaga(LOGIN, authAPI.login);\n\n// checkSaga: 로그인 상태 검증 API 요청을 처리\nexport const checkSaga = createRequestSaga(CHECK, authAPI.check);\n\n// authSaga: auth 관련 saga 총괄 등록\n// takeLatest → 같은 요청 여러 번 들어와도 마지막 것만 처리\nexport function* authSaga() {\n    yield takeLatest(REGISTER, registerSaga);\n    yield takeLatest(LOGIN, loginSaga);\n    yield takeLatest(CHECK, checkSaga);\n}\n\n// 초기 상태 정의\nconst initialState = {\n    register: {\n        username: '',\n        password: '',\n        passwordConfirm: '',\n    },\n    login: {\n        username: '',\n        password: '',\n    },\n    auth: null,       // 로그인/회원가입 성공 시 사용자 정보\n    authError: null,  // 로그인/회원가입 실패 시 에러 정보\n};\n\n// 리듀서 정의\nconst auth = handleActions(\n    {\n        // CHANGE_FIELD\n        // 폼 입력 필드의 값 변경\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n            produce(state, draft => {\n                draft[form][key] = value;\n            }),\n\n        // INITIALIZE_FORM\n        // 폼 상태 초기화\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\n            ...state,\n            [form]: initialState[form],\n            authError: null,  // 에러도 같이 초기화\n        }),\n\n        // 회원가입 성공\n        [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n            ...state,\n            authError: null,\n            auth,\n        }),\n        // 회원가입 실패\n        [REGISTER_FAILURE]: (state, { payload: error }) => ({\n            ...state,\n            authError: error,\n            auth: null,\n        }),\n\n        // 로그인 성공\n        [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n            ...state,\n            authError: null,\n            auth,\n        }),\n        // 로그인 실패\n        [LOGIN_FAILURE]: (state, { payload: error }) => ({\n            ...state,\n            authError: error,\n        }),\n\n        // check (로그인 유지) 성공\n        [CHECK_SUCCESS]: (state, { payload: auth }) => ({\n            ...state,\n            authError: null,\n            auth,\n        }),\n        // check 실패\n        [CHECK_FAILURE]: (state, { payload: error }) => ({\n            ...state,\n            authError: error,\n        }),\n    },\n    initialState\n);\n\n// 이 auth 리듀서를 모듈에서 기본 export\nexport default auth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}