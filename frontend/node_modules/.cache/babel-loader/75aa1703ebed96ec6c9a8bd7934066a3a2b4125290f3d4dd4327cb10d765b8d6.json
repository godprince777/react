{"ast":null,"code":"// redux-actions 라이브러리에서 createAction과 handleActions 가져옴\nimport { createAction, handleActions } from \"redux-actions\";\n\n// 액션 타입 정의\nconst START_LOADING = \"loading/START_LOADING\"; // 로딩 시작\nconst FINISH_LOADING = \"loading/FINISH_LOADING\"; // 로딩 종료\n\n// 액션 생성자\n// payload로 requestType(예: 'LOGIN', 'FETCH_POSTS' 같은 요청 이름)을 넘긴다\nexport const startLoading = createAction(START_LOADING, requestType => requestType);\nexport const finishLoading = createAction(FINISH_LOADING, requestType => requestType);\n\n// 초기 상태\n// 비어있는 객체이지만, 동적으로\n// { LOGIN: true, FETCH_POSTS: false } 처럼 키가 추가된다\nconst initialState = {};\n\n// 리듀서 정의\n// handleActions를 사용하면 switch문 없이도 액션별로 처리 가능\nconst loading = handleActions({\n  // START_LOADING 액션이 들어오면\n  // 해당 requestType을 키로 true 설정\n  [START_LOADING]: (state, action) => ({\n    ...state,\n    [action.payload]: true\n  }),\n  // FINISH_LOADING 액션이 들어오면\n  // 해당 requestType을 키로 false 설정\n  [FINISH_LOADING]: (state, action) => ({\n    ...state,\n    [action.payload]: false\n  })\n}, initialState);\n\n// 이 리듀서를 디폴트 export\nexport default loading;","map":{"version":3,"names":["createAction","handleActions","START_LOADING","FINISH_LOADING","startLoading","requestType","finishLoading","initialState","loading","state","action","payload"],"sources":["/home/prince/work/blog-frontend/src/modules/loading.js"],"sourcesContent":["// redux-actions 라이브러리에서 createAction과 handleActions 가져옴\nimport { createAction, handleActions } from \"redux-actions\";\n\n// 액션 타입 정의\nconst START_LOADING = \"loading/START_LOADING\";    // 로딩 시작\nconst FINISH_LOADING = \"loading/FINISH_LOADING\";  // 로딩 종료\n\n// 액션 생성자\n// payload로 requestType(예: 'LOGIN', 'FETCH_POSTS' 같은 요청 이름)을 넘긴다\nexport const startLoading = createAction(\n  START_LOADING, \n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING, \n  requestType => requestType\n);\n\n// 초기 상태\n// 비어있는 객체이지만, 동적으로\n// { LOGIN: true, FETCH_POSTS: false } 처럼 키가 추가된다\nconst initialState = {};\n\n// 리듀서 정의\n// handleActions를 사용하면 switch문 없이도 액션별로 처리 가능\nconst loading = handleActions(\n    {\n        // START_LOADING 액션이 들어오면\n        // 해당 requestType을 키로 true 설정\n        [START_LOADING]: (state, action) => ({\n            ...state,\n            [action.payload]: true,\n        }),\n        // FINISH_LOADING 액션이 들어오면\n        // 해당 requestType을 키로 false 설정\n        [FINISH_LOADING]: (state, action) => ({\n            ...state,\n            [action.payload]: false,\n        }),\n    },\n    initialState\n);\n\n// 이 리듀서를 디폴트 export\nexport default loading;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;;AAE3D;AACA,MAAMC,aAAa,GAAG,uBAAuB,CAAC,CAAI;AAClD,MAAMC,cAAc,GAAG,wBAAwB,CAAC,CAAE;;AAElD;AACA;AACA,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CACtCE,aAAa,EACbG,WAAW,IAAIA,WACjB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGN,YAAY,CACvCG,cAAc,EACdE,WAAW,IAAIA,WACjB,CAAC;;AAED;AACA;AACA;AACA,MAAME,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA,MAAMC,OAAO,GAAGP,aAAa,CACzB;EACI;EACA;EACA,CAACC,aAAa,GAAG,CAACO,KAAK,EAAEC,MAAM,MAAM;IACjC,GAAGD,KAAK;IACR,CAACC,MAAM,CAACC,OAAO,GAAG;EACtB,CAAC,CAAC;EACF;EACA;EACA,CAACR,cAAc,GAAG,CAACM,KAAK,EAAEC,MAAM,MAAM;IAClC,GAAGD,KAAK;IACR,CAACC,MAAM,CAACC,OAAO,GAAG;EACtB,CAAC;AACL,CAAC,EACDJ,YACJ,CAAC;;AAED;AACA,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}