{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\n// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { produce } from \"immer\";\nimport { createRequestSaga } from \"redux-saga\";\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestTypes('REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestTypes('LOGIN');\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestTypes('CHECK');\nexport const changeField = createAction(CHANGE_FIELD, (form, key, value) => ({\n  form,\n  // register, login\n  key,\n  // username, password, passwordConfirm\n  value // 실제 바꾸려는 값\n}));\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\n//regsiter, login 중 어떤 폼을 초기화할지 전달받음\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  }\n};\n// 리듀서 정의\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value;\n  }),\n  [INITIALIZE_FORM]: (state, {\n    payload: form\n  }) => ({\n    ...state,\n    [form]: initialState[form]\n  })\n}, initialState);\nexport default auth; // 이 auth 리듀서를 모듈에서 기본 export","map":{"version":3,"names":["createAction","handleActions","produce","createRequestSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","createRequestTypes","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","CHECK","CHECK_SUCCESS","CHECK_FAILURE","changeField","form","key","value","initializeForm","initialState","register","username","password","passwordConfirm","login","auth","state","payload","draft"],"sources":["/home/prince/work/blog-frontend/src/modules/auth.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\"; \n// redux-actions 라이브러리에서 createAction(액션 생성자), handleActions(리듀서 생성 도우미) 불러옴\nimport { produce } from \"immer\";\nimport { createRequestSaga } from \"redux-saga\";\n\nconst CHANGE_FIELD = \"auth/CHANGE_FIELD\";\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestTypes('REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestTypes('LOGIN');\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestTypes('CHECK');\n\nexport const changeField = createAction(CHANGE_FIELD,\n    (form, key, value) => ({\n         form, // register, login\n         key, // username, password, passwordConfirm\n         value, // 실제 바꾸려는 값\n    }));\n\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form);\n//regsiter, login 중 어떤 폼을 초기화할지 전달받음\n\nconst initialState = {\n    register: {\n        username: '',\n        password: '',\n        passwordConfirm: '',\n    },\n    login: {\n        username: '',\n        password: '',\n    },\n}\n// 리듀서 정의\nconst auth = handleActions(\n    {\n        [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n            produce(state, draft => {\n                draft[form][key] = value;\n            }),\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\n            ...state,\n            [form]: initialState[form],\n        }),\n    },\n    initialState\n);\n\nexport default auth; // 이 auth 리듀서를 모듈에서 기본 export\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D;AACA,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,iBAAiB,QAAQ,YAAY;AAE9C,MAAMC,YAAY,GAAG,mBAAmB;AACxC,MAAMC,eAAe,GAAG,sBAAsB;AAE9C,MAAM,CAACC,QAAQ,EAAEC,gBAAgB,EAAEC,gBAAgB,CAAC,GAAGC,kBAAkB,CAAC,UAAU,CAAC;AACrF,MAAM,CAACC,KAAK,EAAEC,aAAa,EAAEC,aAAa,CAAC,GAAGH,kBAAkB,CAAC,OAAO,CAAC;AACzE,MAAM,CAACI,KAAK,EAAEC,aAAa,EAAEC,aAAa,CAAC,GAAGN,kBAAkB,CAAC,OAAO,CAAC;AAEzE,OAAO,MAAMO,WAAW,GAAGhB,YAAY,CAACI,YAAY,EAChD,CAACa,IAAI,EAAEC,GAAG,EAAEC,KAAK,MAAM;EAClBF,IAAI;EAAE;EACNC,GAAG;EAAE;EACLC,KAAK,CAAE;AACZ,CAAC,CAAC,CAAC;AAEP,OAAO,MAAMC,cAAc,GAAGpB,YAAY,CAACK,eAAe,EAAGY,IAAI,IAAKA,IAAI,CAAC;AAC3E;;AAEA,MAAMI,YAAY,GAAG;EACjBC,QAAQ,EAAE;IACNC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE;EACrB,CAAC;EACDC,KAAK,EAAE;IACHH,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACd;AACJ,CAAC;AACD;AACA,MAAMG,IAAI,GAAG1B,aAAa,CACtB;EACI,CAACG,YAAY,GAAG,CAACwB,KAAK,EAAE;IAAEC,OAAO,EAAE;MAAEZ,IAAI;MAAEC,GAAG;MAAEC;IAAM;EAAE,CAAC,KACrDjB,OAAO,CAAC0B,KAAK,EAAEE,KAAK,IAAI;IACpBA,KAAK,CAACb,IAAI,CAAC,CAACC,GAAG,CAAC,GAAGC,KAAK;EAC5B,CAAC,CAAC;EACN,CAACd,eAAe,GAAG,CAACuB,KAAK,EAAE;IAAEC,OAAO,EAAEZ;EAAK,CAAC,MAAM;IAC9C,GAAGW,KAAK;IACR,CAACX,IAAI,GAAGI,YAAY,CAACJ,IAAI;EAC7B,CAAC;AACL,CAAC,EACDI,YACJ,CAAC;AAED,eAAeM,IAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}